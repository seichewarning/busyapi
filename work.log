- inspect the project

- use aws, get familar with new tools

- decide on persistent key-value db, think learning, setup, config,
  scaling, throughput, cli, testing, running locally...

  NO  - redis, fast but not familiar with persistence setup
  NO  - mongoDB, what Propeller uses, fast, but too complicated for this
        and setup/config too time consuming on AWS
  NO  - rocksDB, super fast, cons similar to mongoDB
  YES - dynamoDB, native aws tool, scalable, small learning curve

- load testing...
   Just use Artillery, versatile, pretty straight forward, possible
   Lambda integration, easy.

- decide on building blocks
  Option 1:
    - Fastify instead Express
    - Elastic Load Balancer
    - Simple scaling create bunch of beefy instances
    PROS: long term solution with more control once functional
          requirements figured out, versatile for change
    CONS: too many moving parts to get working in 2 hours given
          simple explicit requirements.  Might rack up a big bill
          if not careful

  Option 2:
    - AWS Lambda with Node.js
    PROS: quick, tons of info, easy scaling and testing, more
          configuration than programming
    CONS: haven't used it yet, might rack up a big bill if not 
          careful, more configuration than programming


- Going with OPTION 2!
  - play around and get super basic lambda function working
  - get dynamoDB creating Items for request
  - figure out table structure, just use uuid as sorting index
    assuming many creates per patient


- strip anything unessecary from busyapi
  - remove it all and re-npm init
  - get writeUsage lambda function working

- get work flow going, zipping project, uploading, testing.
  not going to worry about efficient deployment process right
  now, one off proof of concept

- try out local dynamoDB, get familiar
** java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb
** aws dynamodb --endpoint-url http://localhost:8000 describe-table --table-name Usages

- don't even need express server for lambda, hope it's not cheating...

** zip -r ../busyapi.zip *

- lambda role, make admin, refine later if time.
- create lambda test using readme json

- not going to worry too much about error handling right now, will
  if there's enough time.

- deal with lambda config minutiae
- fix sloppy mistakes from strip out
- almost tempted to figure out aws cli instead of using web interface..
- looked into aws serverless np, but spent too much time
- set TABLE_NAME key/value in lambda config

- got test working with Item in db, but no return id, figure out..
  use callback spit back json

- just checked in code, work on load testing
- yikes, need to figure out api gateway....
  - create api and usages resources along
  - create post method on usages
- api test works but need to fix returned uuid, always the same...
  (or perhaps it was my imagination since last few chars the same)

- create ad-hoc testing stage, have url to hit locally now
  - https://1zszg024ci.execute-api.us-east-1.amazonaws.com/testing
  - curl -X POST -H "Content-Type: application/json" --data '{"patientId":"100","timestamp":"Tue Nov 01 2016 09:11:51 GMT-0500 (CDT)","medication":"Albuterol"}' https://1zszg024ci.execute-api.us-east-1.amazonaws.com/testing/api/usages

- curl returning properly and data being inserted into db, now ready
  for load testing... try locally first, will add config file but not
  save package in order to reduce size.

- got initial artillery config working and inserting unique patientId's
  ** artillery run loadTest.yml

- setting write capacity on db to 500 and running a t2.xlarge to see if
  i can max this out...
  ** ssh -i ~/.ssh/testing.pem ubuntu@ec2-54-174-41-255.compute-1.amazonaws.com

Nope... hit concurrency limits on aws lambda.

CONCLUSION:  I was able to get ~600 RPS with this setup.
I'm convinced with the proper tuning of aws parameters and throttling 
removed on lambda and dynamoDB that that this solution would fairly
easily reach 1M users per minute.


